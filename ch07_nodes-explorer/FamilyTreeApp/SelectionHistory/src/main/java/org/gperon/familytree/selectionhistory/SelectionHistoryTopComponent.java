/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package org.gperon.familytree.selectionhistory;

import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.gperon.familytree.selectionhistory//SelectionHistory//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SelectionHistoryTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "org.gperon.familytree.selectionhistory.SelectionHistoryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SelectionHistoryAction",
        preferredID = "SelectionHistoryTopComponent"
)
@Messages({
    "CTL_SelectionHistoryAction=SelectionHistory",
    "CTL_SelectionHistoryTopComponent=SelectionHistory Window",
    "HINT_SelectionHistoryTopComponent=This is a SelectionHistory window"
})
public final class SelectionHistoryTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<Node> result;

    public SelectionHistoryTopComponent() {
        initComponents();
        setName(Bundle.CTL_SelectionHistoryTopComponent());
        setToolTipText(Bundle.HINT_SelectionHistoryTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        displayTextArea.setColumns(20);
        displayTextArea.setRows(5);
        jScrollPane1.setViewportView(displayTextArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Node.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends Node> nodes = result.allInstances();
        // only get the selection if there is one
        // otherwise leave the selection unchanged!

        // If you want the selection window to clear
        // when the user clicks on a non-node thingy,
        // then remove the test for isEmpty
        if (!nodes.isEmpty()) {
            StringBuilder status = new StringBuilder();
            StringBuilder sb = new StringBuilder("\n");
            for (Node node : nodes) {
                sb.append(" [").append(node.getDisplayName()).append("] ");
                status.append(" [").append(node.getDisplayName()).append("] ");
            }
            StatusDisplayer.getDefault().setStatusText(status.toString());
            displayTextArea.setText(sb.insert(0, displayTextArea.getText()).toString());
        }
    }
}
